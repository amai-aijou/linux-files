#include <stdio.h>
int main(void) {

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @              -----------                @
# @           Install Kubernetes            @
# @                 Ubuntu                  @
# @              -----------                @
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

##### VERIFIED WORKING WITH UBUNTU 22.04 LTS AND KUBERNETES 1.34 ON 9/15/2025! #####

#update apt's package list, && upgrade the packages to the newest version, skipping the "yes" dialogue
sudo apt update && sudo apt upgrade -y

#disable swap, as it must be off for any node running k8s (support currently in beta since 1.28)
#first command disables for current boot, second adds a # to /etc/fstab to comment out the swap table
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#creates a kernel modules-load config file that enables two modules necessary for k8s
#overlay: overlay filesystem, for pod network abstraction
#br_netfilter: bridge netfilter for k8s networking
#note: some docs claim the kubeadm pre-flight check no longer requires overlay. I still recommend
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter

#creates a companion etc/sysctl.conf config file to enable special parameters (see /sys/proc for parameters)
#enables bridged ipv4/6 traffic to be passed to iptables for processing. see:
#https://wiki.libvirt.org/Net.bridge.bridge-nf-call_and_sysctl.conf.html
#technically, most distros seem to default to having this on, but RHEL-based distros add a file to turn it off
#you should have it just in case
sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

#loads settings from all sysctl config files (etc/sysctl.conf, etc/sysctl.d, etc) without requiring reboot
sudo sysctl --system

#install common containerd dependencies
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

#enable docker repository
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

#update the package list again, then install containderd
sudo apt update
sudo apt install -y containerd.io

#configure containerd. Creates a default config, then pipes to file config.toml. Ensures "SystemdCgroup=true" is set
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

#pretty sure you'll figure this one out
sudo systemctl restart containerd
sudo systemctl enable containerd

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# install kubectl, kubeadm, kubelet
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

######## USE THIS ONE (Especially you, T!) ########
# Initialize Kube Cluster - Flannel
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

##################DO NOT USE ######################
# Initialize Kube Cluster - Calico (not working)
# sudo kubeadm init

# Create directory for kubernetes configuration files
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Create directory for kubernetes configuration files
mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

# With this, installation of the primary node is complete; however, the node will not work without a CNI!

# OPTIONAL: Remove taint from master node
# [NOTE:replace example.com with the name of your node!]
kubectl taint node example.com node-role.kubernetes.io/control-plane:NoSchedule-


################################
# Container Network Interface  #
#           (CNI)              #
################################

############## USE THIS! ############
# Flannel (recommended for smaller, simpler installs. "it just works"):
# https://github.com/flannel-io/flannel

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

############### NOT WORKING (skip to "Install Utilities") ####################
# Calico (Recommended for larger installs, supports Network Policy and other enterprise features)
# https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart
# kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/tigera-operator.yaml
# kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/custom-resources.yaml
# watch kubectl get tigerastatus

################################
#      Install Utilities       #
################################

### Install Helm ###
# https://helm.sh/docs/intro/install/

sudo apt-get install curl gpg apt-transport-https --yes
curl -fsSL https://packages.buildkite.com/helm-linux/helm-debian/gpgkey | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/helm.gpg] https://packages.buildkite.com/helm-linux/helm-debian/any/ any main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm

### Kubernetes Bash auto-complete ###
source <(kubectl completion bash) # set up autocomplete in bash into the current shell, bash-completion package should be installed first.
echo "source <(kubectl completion bash)" >> ~/.bashrc # add autocomplete permanently to your bash shell.
alias k=kubectl
complete -o default -F __start_kubectl k

### Kubectl Aliases ###
# https://github.com/ahmetb/kubectl-aliases
# Add the following to the end of ~/.bashrc:
[ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases

# "source" .bashrc file to update it immediately (no need for reboot)
source ~/.bashrc

#######################
#   Add Worker Node   #
#######################   

# Kubernetes Join command (IP, Token, Discovery Token are all example values; do not use!)
kubeadm join 138.197.184.45:6443 --token 72ww2b.6orffywqcf5s4p2z \
        --discovery-token-ca-cert-hash sha256:aafb79cdd45a6e3b3fac01fb3efba0817360b01f90a4b6c3f11567108a36ba67
}
