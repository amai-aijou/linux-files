# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @               ---------                 @
# @		      Install Kubernetes			@
# @                  RHEL                   @
# @               ---------                 @
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#update apt's package list, && upgrade the packages to the newest version, skipping the "yes" dialogue
sudo dnf upgrade

#disable swap, as it must be off for any node running k8s (support currently in beta since 1.28)
#first command disables for current boot, second adds a # to /etc/fstab to comment out the swap table
sudo swapoff -a

sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#creates a kernel modules-load config file that enables two modules necessary for k8s
#overlay: overlay filesystem, for pod network abstraction
#br_netfilter: bridge netfilter for k8s networking
#note: some docs claim the kubeadm pre-flight check no longer requires overlay. I still recommend
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

#creates a companion etc/sysctl.conf config file to enable special parameters (see /sys/proc for parameters)
#enables bridged ipv4/6 traffic to be passed to iptables for processing. see:
#https://wiki.libvirt.org/Net.bridge.bridge-nf-call_and_sysctl.conf.html
#technically, most distros seem to default to having this on, but RHEL-based distros add a file to turn it off
#you should have it just in case
sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

#loads settings from all sysctl config files (etc/sysctl.conf, etc/sysctl.d, etc) without requiring reboot
sudo sysctl --system

#enable docker repository
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

#update the package list again, then install containderd
sudo dnf makecache

sudo dnf install -y containerd.io

#configure containerd. Moves default config to a backup, Creates a new default config, then pipes to file config.toml. Ensures "SystemdCgroup=true" is set
sudo mv /etc/containerd/config.toml /etc/containerd/config.toml.bak

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

#pretty sure you'll figure this one out
sudo systemctl restart containerd

sudo systemctl enable containerd

# May or may not need to modify firewalld (will add to this list as ports are needed. k8s will complain about them as you install, easy to tell):
# --reload will force the --permanent settings to be utilized immediately, without a restart

sudo firewall-cmd --permanent --zone=home --change-interface=enp0s3
sudo firewall-cmd --zone=home --add-port={6443,2379-2380,10250,10251,10257,10259,179}/tcp --permanent
sudo firewall-cmd --zone=home --permanent --add-port=4789/udp
sudo firewall-cmd --reload

# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0

sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

# This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF

# install kubectl, kubeadm, kubelet
sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

# enable kubelet
sudo systemctl enable --now kubelet

# Initialize Kube Cluster
sudo kubeadm init --pod-network-cidr=192.168.0.0/16

# Create directory for kubernetes configuration files
mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

# With this, installation of the primary node is complete; however, the node will not work without a CNI!

# OPTIONAL: Remove taint from master node [NOTE:replace example.com with the name of your node!]
kubectl taint node example.com node-role.kubernetes.io/control-plane:NoSchedule


################################
# Container Network Interface  #
#           (CNI)              #
################################

# Flannel (recommended for smaller, simpler installs. "it just works"):
https://github.com/flannel-io/flannel

# Calico (Recommended for larger installs, supports Network Policy and other enterprise features)
https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart


#######################
#   Add Worker Node   #
#######################   

# Kubernetes Join command (IP, Token, Discovery Token are all example values; do not use!)
kubeadm join 138.197.184.45:6443 --token 72ww2b.6orffywqcf5s4p2z \
        --discovery-token-ca-cert-hash sha256:aafb79cdd45a6e3b3fac01fb3efba0817360b01f90a4b6c3f11567108a36ba67
